import {URIValue} from 'rheactor-value-objects'
import {String as StringType, Integer as IntegerType, maybe, irreducible, refinement, struct} from 'tcomb'

const $context = new URIValue('https://www.ietf.org/id/draft-ietf-appsawg-http-problem-01.txt')
const MaybeStringType = maybe(StringType)
const HttpStatusCodeType = maybe(refinement(IntegerType, n => n >= 100 && n < 600, 'HttpStatusCodeType'))

export class HttpProblem {
  /**
   * See https://datatracker.ietf.org/doc/draft-ietf-appsawg-http-problem/
   * @param {String} type     A URI reference [RFC3986] that identifies the problem type.
   *                          When dereferenced, it is encouraged to provide  human-readable documentation for the
   *                          problem type (e.g., using  HTML [W3C.REC-html401-19991224]). When this member is not
   *                          present, its value is assumed to be "about:blank".
   * @param {String} title    A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence
   *                          to occurrence of the problem, except for purposes of localisation.
   * @param {Number} status   The HTTP status code ([RFC7231], Section 6) generated by the origin server for this
   *                          occurrence of the problem.
   * @param {String} detail   An human readable explanation specific to this occurrence of the problem.
   * @constructor
   */
  constructor (type = 'about:blank', title, status, detail) {
    StringType(type)
    MaybeStringType(title)
    HttpStatusCodeType(status)
    MaybeStringType(detail)
    this.name = HttpProblem.name
    this.type = type
    this.title = title
    this.status = status
    this.detail = detail
    this.$context = $context
  }

  /**
   * @param {{$context: String, type: (String|*), title: (String|*), status: (Number|*), detail: (String|*)}} data
   * @returns {HttpProblem}
   */
  static fromJSON (data) {
    HttpProblemJSONType(data)
    return new HttpProblem(
      data.type,
      data.title,
      data.status,
      data.detail
    )
  }
}

HttpProblem.prototype = Object.create(Error.prototype)

/**
 * @returns {{$context: String, type: (String|*), title: (String|*), status: (Number|*), detail: (String|*)}}
 */
HttpProblem.prototype.toJSON = function () {
  return {
    $context: this.$context.toString(),
    type: this.type,
    title: this.title,
    status: this.status,
    detail: this.detail
  }
}

export const HttpProblemJSONType = struct({
  $context: refinement(StringType, s => s === $context.toString(), 'HttpProblemContext'),
  type: StringType,
  title: MaybeStringType,
  status: HttpStatusCodeType,
  detail: MaybeStringType
}, 'HttpProblemJSONType')
export const HttpProblemType = irreducible('HttpProblemType', (x) => {
  return (x instanceof HttpProblem) || (x && x.constructor && x.constructor.name === HttpProblem.name && '$context' in x && URIValue.is(x.$context) && $context.equals(x.$context))
})
